[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ax_utils"
version = "3.0.2"
description = "Standalone ax_utils package with C/C++ extensions for high-performance utilities"
readme = "README.md"
requires-python = ">=3.8.1"
license = "MIT"
authors = [
    {name = "Your Company", email = "contact@yourcompany.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["utilities", "performance", "tree", "queue", "unicode"]
dependencies = [
    "setuptools",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-benchmark>=4.0",
    "pytest-xdist>=3.0",
    "black>=23.0",
    "isort>=5.0",
    "flake8>=6.0",
    "mypy>=1.0",
    "twine>=4.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
]

[project.urls]
Homepage = "https://github.com/yourcompany/ax_utils"
Documentation = "https://github.com/yourcompany/ax_utils#readme"
Repository = "https://github.com/yourcompany/ax_utils.git"
"Bug Tracker" = "https://github.com/yourcompany/ax_utils/issues"

[project.entry-points."gevent.plugins.monkey.did_patch_all"]
ax_queue = "ax_utils.ax_queue.gevent_patch:patch"

[tool.setuptools]
packages = ["ax_utils"]
include-package-data = true

[tool.setuptools.package-dir]
ax_utils = "ax_utils"

[tool.setuptools.package-data]
ax_utils = ["**/*.c", "**/*.cpp", "**/*.h"]
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["ax_utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ax_utils.*._*",  # Ignore C extensions
]
ignore_errors = true

[dependency-groups]
dev = [
    "black>=24.8.0",
    "flake8>=7.1.2",
    "isort>=5.13.2",
    "mypy>=1.14.1",
    "pytest>=8.3.5",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
]
